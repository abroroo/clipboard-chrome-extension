{"version":3,"file":"content.bundle.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;AC7DA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;AC1EA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAGA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;AChDA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;ACPA;;;;;ACAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAEA;AACA","sources":["webpack:///./src/styles/floating-button.css?d1b3","webpack:///./src/styles/global.css?0e79","webpack:///./src/styles/modal.css?84ac","webpack:///./src/styles/panel.css?6bfb","webpack:///./src/styles/toast.css?5b90","webpack:///./src/drag.js","webpack:///./src/events.js","webpack:///./src/state.js","webpack:///./src/ui.js","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///./src/content.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","// extracted by mini-css-extract-plugin\nexport {};","export function enableDragging(floatingBtn) {\n    let isDragging = false;\n    let startY, initialY;\n    let animationFrameId = null;\n\n    const onMove = (clientY) => {\n        if (isDragging) {\n            const dy = clientY - startY;\n\n            // Use requestAnimationFrame to update position\n            if (!animationFrameId) {\n                animationFrameId = requestAnimationFrame(() => {\n                    const clampedY = Math.max(0, Math.min(window.innerHeight - floatingBtn.offsetHeight, initialY + dy));\n                    floatingBtn.style.top = `${clampedY}px`;\n                    animationFrameId = null; // Reset for the next frame\n                });\n            }\n        }\n    };\n\n    const onMouseMove = (e) => {\n        onMove(e.clientY);\n    };\n\n    const onTouchMove = (e) => {\n        onMove(e.touches[0].clientY);\n    };\n\n    const onStart = (clientY) => {\n        floatingBtn.classList.add('dragging');\n        isDragging = true;\n        startY = clientY;\n        initialY = floatingBtn.getBoundingClientRect().top;\n        document.body.style.userSelect = 'none'; // Prevent text selection\n    };\n\n    floatingBtn.addEventListener('mousedown', (e) => {\n        onStart(e.clientY);\n    });\n\n    floatingBtn.addEventListener('touchstart', (e) => {\n        onStart(e.touches[0].clientY);\n    });\n\n    document.addEventListener('mousemove', onMouseMove);\n    document.addEventListener('touchmove', onTouchMove);\n\n    const onEnd = () => {\n        if (isDragging) {\n            isDragging = false;\n            floatingBtn.classList.remove('dragging');\n            document.body.style.userSelect = ''; // Re-enable text selection\n            if (animationFrameId) {\n                cancelAnimationFrame(animationFrameId); // Clean up if dragging ends\n                animationFrameId = null;\n            }\n        }\n    };\n\n    document.addEventListener('mouseup', onEnd);\n    document.addEventListener('touchend', onEnd);\n}\n","import {addClip, renderClips} from './state.js';\n\nexport function bindEvents(floatingBtn, panel, modal, modalOverlay, toast) {\n        floatingBtn.addEventListener('click', () => {\n            panel.classList.toggle('active');\n        });\n\n        document.querySelector('.add-btn').addEventListener('click', () => {\n            modal.classList.add('active');\n            modalOverlay.classList.add('active');\n            document.querySelector('.modal-textarea').focus();\n        });\n\n        document.querySelector('.cancel-btn').addEventListener('click', () => {\n            closeModal(modal, modalOverlay);\n        });\n\n        modalOverlay.addEventListener('click', () => {\n            closeModal(modal, modalOverlay);\n        });\n\n        document.addEventListener('click', (event) => {\n            const isClickInside = panel.contains(event.target) || floatingBtn.contains(event.target) || modal.contains(event.target);\n\n            if (!isClickInside) {\n                panel.classList.remove('active');\n            }\n        });\n\n        document.querySelector('.save-btn').addEventListener('click', () => {\n            const text = document.querySelector('.modal-textarea').value.trim();\n            if (text) {\n                addClip(text, () => renderClips(toast));\n                closeModal(modal, modalOverlay);\n                showToast(toast, 'Clip saved successfully!');\n            }\n        });\n\n        document.querySelector('.modal-textarea').addEventListener('keydown', (event) => {\n            const text = document.querySelector('.modal-textarea').value.trim();\n            if (event.key === 'Enter' && !event.shiftKey && text) {\n                event.preventDefault(); // Prevent newline in textarea\n                closeModal(modal, modalOverlay);\n                addClip(text, () => renderClips(toast));\n                showToast(toast, 'Clip saved successfully!');\n\n            } else if (event.key === 'Escape') {\n                closeModal(modal, modalOverlay);\n            }\n        });\n\n        document.addEventListener('keydown', (event) => {\n            if (event.key === 'Escape' && panel.classList.contains('active')) {\n                panel.classList.remove('active');\n            }\n        });\n\n\n    }\n\n export function closeModal(modal, modalOverlay) {\n        modal.classList.remove('active');\n        modalOverlay.classList.remove('active');\n        document.querySelector('.modal-textarea').value = '';\n    }\n\n export function showToast(toast, message) {\n        toast.textContent = message;\n\n        toast.classList.add('active');\n        setTimeout(() => {\n            toast.classList.remove('active');\n\n        }, 3000);\n    }\n\n","import {showToast} from \"./events\";\n\nexport let clips = [];\n\nexport function loadClips(callback) {\n        chrome.storage.local.get(['clips'], (result) => {\n            if (result.clips) {\n                clips = result.clips;\n                callback();\n            }\n        });\n    }\n\nexport function addClip(text, callback) {\n        clips.unshift({id: Date.now(), text});\n        chrome.storage.local.set({clips}, callback);\n    }\n\nexport function renderClips(toast) {\n        const container = document.querySelector('.clips-container');\n        container.innerHTML = clips.map(clip => `\n        <div class=\"clip-item\" data-id=\"${clip.id}\">\n            <div class=\"clip-text\">${clip.text}</div>\n            <button class=\"delete-btn\" data-id=\"${clip.id}\">x</button>\n        </div>\n    `).join('');\n\n\n    document.querySelectorAll('.clip-item').forEach(item => {\n        item.addEventListener('click', (e) => {\n            if (!e.target.classList.contains('delete-btn')) {\n                item.classList.add('active');\n                const text = item.querySelector('.clip-text').textContent;\n                navigator.clipboard.writeText(text).then(() => {\n                    showToast(toast,'Copied to clipboard!');\n                });\n            }\n        });\n    });\n\n\n    document.querySelectorAll('.delete-btn').forEach(btn => {\n        btn.addEventListener('click', (e) => {\n            e.stopPropagation();\n            const id = parseInt(btn.dataset.id);\n            clips = clips.filter(clip => clip.id !== id);\n            chrome.storage.local.set({clips}, () => renderClips(toast));\n        });\n    });\n\n    }\n\n","\n\n    export function createFloatingButton() {\n        const floatingBtn = document.createElement('div');\n        floatingBtn.className = 'clipboard-floating-btn';\n        floatingBtn.innerHTML = `\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"none\" stroke=\"currentColor\" stroke-width=\"2\" stroke-linecap=\"round\" stroke-linejoin=\"round\">\n            <path d=\"M16 4h2a2 2 0 0 1 2 2v14a2 2 0 0 1-2 2H6a2 2 0 0 1-2-2V6a2 2 0 0 1 2-2h2\"></path>\n            <rect x=\"8\" y=\"2\" width=\"8\" height=\"4\" rx=\"1\" ry=\"1\"></rect>\n        </svg>\n    `;\n        return floatingBtn;\n    }\n\n    export function createPanel() {\n        const panel = document.createElement('div');\n        panel.className = 'clipboard-panel';\n        panel.innerHTML = `\n        <div class=\"panel-header\">\n            <div class=\"panel-title\">Copy clips</div>\n            <button class=\"add-btn\">+ New</button>\n        </div>\n        <div class=\"clips-container\"></div>\n    `;\n        return panel;\n    }\n\n    export function createModal() {\n        const modal = document.createElement('div');\n        modal.className = 'add-clip-modal';\n        modal.innerHTML = `\n        <h3 class=\"modal-title\" style=\"user-select: none; margin-bottom: 5px;\">Add New Clip</h3>\n        <textarea class=\"modal-textarea\" placeholder=\"Enter text to save...\"></textarea>\n        <div class=\"modal-buttons\">\n            <button class=\"modal-btn cancel-btn\">Cancel</button>\n            <button class=\"modal-btn save-btn\">Save</button>\n        </div>\n    `;\n        return modal;\n    }\n\n    export function createModalOverlay() {\n        const modalOverlay = document.createElement('div');\n        modalOverlay.className = 'modal-overlay';\n        return modalOverlay;\n    }\n\n    export function createToast() {\n        const toast = document.createElement('div');\n        toast.className = 'toast';\n        return toast;\n    }\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import './styles/floating-button.css';\nimport './styles/panel.css';\nimport './styles/modal.css';\nimport './styles/toast.css';\nimport './styles/global.css';\n\nimport {createFloatingButton, createModal, createModalOverlay, createPanel, createToast} from './ui.js';\nimport {loadClips, renderClips} from './state.js';\nimport {bindEvents} from './events.js';\nimport {enableDragging} from './drag.js';\n\n\nconst floatingBtn = createFloatingButton();\nconst panel = createPanel();\nconst modal = createModal();\nconst modalOverlay = createModalOverlay();\nconst toast = createToast();\n\ndocument.body.appendChild(floatingBtn);\ndocument.body.appendChild(panel);\ndocument.body.appendChild(modal);\ndocument.body.appendChild(modalOverlay);\ndocument.body.appendChild(toast);\n\nloadClips(() => renderClips(toast));\n\nbindEvents(floatingBtn, panel, modal, modalOverlay, toast);\nenableDragging(floatingBtn);\n"],"names":[],"sourceRoot":""}